local exports = {}

exports.mapping = {
	["version"] = {
		description = "Returns the current Cobalt version.",
		requiredEntries = 0,
		params = {},
		returns = "string",
	},
	--[[["cd"] = {
		description = "Sets the current dir. And aways returs the current directory.",
		requiredEntries = 0,
		params = {"string"},
		returns = "string",
	},]]
	["max"] = {
		description = "Returns the bigger number between the given numbers or list.",
		requiredEntries = 0,
		openEntries = true,
		params = {"list/number"},
		returns = "number",
	},
	["min"] = {
		description = "Returns the smaller number between the given numbers or list.",
		requiredEntries = 0,
		openEntries = true,
		params = {"list/number"},
		returns = "number",
	},
	["+"] = {
		description = "Addition operator.",
		requiredEntries = 2,
		openEntries = true,
		params = {"number"},
		returns = "number",
	},
	["-"] = {
		description = "Subtraction operator.",
		requiredEntries = 2,
		openEntries = true,
		params = {"number"},
		returns = "number",
	},
	["*"] = {
		description = "Multiplication operator.",
		requiredEntries = 2,
		openEntries = true,
		params = {"number"},
		returns = "number",
	},
	["/"] = {
		description = "Division operator.",
		requiredEntries = 2,
		params = {"number", "number"},
		returns = "number",
	},
	["//"] = {
		description = "Floor division operator.",
		requiredEntries = 2,
		params = {"number", "number"},
		returns = "number",
	},
	["%"] = {
		description = "Modulo operator.",
		requiredEntries = 2,
		params = {"number", "number"},
		returns = "number",
	},
	["^"] = {
		description = "Exponentiation operator",
		requiredEntries = 2,
		params = {"number", "number"},
		returns = "number",
	},
	["**"] = {
		description = "Exponentiation by square operator",
		requiredEntries = 1,
		params = {"number"},
		returns = "number",
	},
	["***"] = {
		description = "Exponentiation by cubic operator",
		requiredEntries = 1,
		params = {"number"},
		returns = "number",
	},
	["=="] = {
		description = "Comparative operator equal, he compares two values if they are equal or not, returning a boolean, very useful in if's.",
		requiredEntries = 1,
		params = {"any", "any"},
		returns = "boolean",
	},
	["!="] = {
		description = "Comparative operator not equal, he compares two values if they are equal or not, returning a boolean, very useful in if's as well.",
		requiredEntries = 1,
		params = {"any", "any"},
		returns = "boolean",
	},
	[">"] = {
		description = "Comparative operator bigger than, this compares two number values if the second value is bigger than the first, returning a boolean.",
		requiredEntries = 2,
		params = {"number", "number"},
		returns = "boolean",
	},
	["<"] = {
		description = "Comparative operator smaller than, this compares two number values if the second value is smaller than the first, returning a boolean.",
		requiredEntries = 2,
		params = {"number", "number"},
		returns = "boolean",
	},
	[">="] = {
		description = "Comparative operator bigger or equal than, this compares two number values if the second value is equal or is bigger than the first, returning a boolean.",
		requiredEntries = 2,
		params = {"number", "number"},
		returns = "boolean",
	},
	["<="] = {
		description = "Comparative operator smaller or equal than, this compares two number values if the second value is equal or is smaller than the first, returning a boolean.",
		requiredEntries = 2,
		params = {"number", "number"},
		returns = "boolean",
	},
	["nil?"] = {
		description = "Comparative nil operator, this function checks if the given value is 'nil' or not, returning true if is nil.",
		requiredEntries = 0,
		params = {"any"},
		returns = "boolean",
	},
	["and"] = {
		description = "Comparing multiple values, this functions returns a true boolean if all the given values ​​are true, if one of them is false the function will return false.",
		requiredEntries = 2,
		openEntries = true,
		params = {"boolean"},
		returns = "boolean",
	},
	["or"] = {
		description = "This operator try check if at least one of the given values are true, i.g: (or false false false true): true",
		requiredEntries = 2,
		openEntries = true,
		params = {"boolean"},
		returns = "boolean",
	},
	["not"] = {
		description = "This function invert the given value, false to true, true to false, useful if you want to check for example, if doesn't something exists.",
		requiredEntries = 1,
		params = {"boolean"},
		returns = "boolean",
	},
	["run"] = {
		description = "Attempts to perform cobalt functions or a value.",
		requiredEntries = 1,
		openEntries = true,
		params = {"function"},
		returns = "list",
	},
	["spawn"] = {
		description = "Runs in background given functions, doesn't returns nothing.",
		requiredEntries = 1,
		openEntries = true,
		params = {"function"},
		returns = "nil",
	},

	--- forms/functions
	["require"] = {
		description = "Calls another Cobalt file in given path, the path must be the file location, '../my/path/to/module.ct'",
		requiredEntries = 1,
		params = {"string"},
		returns = "any",
	},
	["delay"] = {
		description = "Makes your code wait in seconds.",
		requiredEntries = 1,
		params = {"number"},
		returns = "nil",
	},
	["var"] = {
		description = "Creates a variable callable by a (get key_name) function or {key_name}",
		requiredEntries = 2,
		params = {"string", "any"},
		returns = "nil",
	},
	["get"] = {
		description = "Gets variables by his name and returns the variable value.",
		requiredEntries = 1,
		params = {"string"},
		returns = "any",
	},
	["input"] = {
		description = "This functions open the input for the user write things in it.",
		requiredEntries = 0,
		params = {"string"},
		returns = "string",
	},
	["stdout"] = {
		description = "Like println or print, but prints everything in one line, doesnt matters if is called again.",
		requiredEntries = 0,
		openEntries = true,
		params = {"any"},
		returns = "nil",
	},
	["print"] = {
		description = "The function print is useful for write something in the terminal, can be used to print results of mathematical operations or any other thing.",
		requiredEntries = 0,
		openEntries = true,
		params = {"any"},
		returns = "nil",
	},
	["println"] = {
		description = "It does the same as the normal print, but not like the normal one, this prints only one line with all the arguments.",
		requiredEntries = 0,
		openEntries = true,
		params = {"any"},
		returns = "nil",
	},
	["clear"] = {
		description = "Clear the terminal.",
		requiredEntries = 0,
		params = {},
		returns = "nil",
	},
	["while"] = {
		description = "Repeats the given functions until the choosen operator retuns false.",
		requiredEntries = 1,
		openEntries = true,
		params = {"boolean", "function/string"},
		returns = "nil",
	},
	["for"] = {
		description = "Repeats the given functions for every value in a list or repeats until a certain number.",
		requiredEntries = 1,
		openEntries = true,
		params = {"list/number", "function/string"},
		returns = "nil",
	},
	["continue"] = {
		description = "Skips a run in a for loop.",
		requiredEntries = 0,
		params = {},
		returns = "nil",
	},
	["function"] = {
		description = "Creates a custom function with a name, being able to be called as (my_function_name [my_arg1] [my_arg2] ...)",
		requiredEntries = 1,
		openEntries = true,
		params = {"string", "function/string"},
		returns = "nil",
	},
	["if"] = {
		description = "Execute given functions when value is true or if is false executes the given functions defined after the 'else' value setted.",
		requiredEntries = 1,
		openEntries = true,
		params = {"boolean", "function/string"},
		returns = "nil",
	},
	["type"] = {
		description = "Returns the type of the given value. Outputs: string, number, boolean, nil, boolean, list",
		requiredEntries = 0,
		params = {"any"},
		returns = "string",
	},
	["inf"] = {
		description = "Returns a infinite number.",
		requiredEntries = 0,
		params = {},
		returns = "number",
	},
	["nothing"] = {
		description = "Returns a empty string. You can use this in replaces.",
		requiredEntries = 0,
		params = {},
		returns = "string",
	},
	["space"] = {
		description = "Returns a space string",
		requiredEntries = 0,
		params = {},
		returns = "string",
	},
	["break"] = {
		description = "Breaks a for loop.",
		requiredEntries = 0,
		params = {},
		returns = "nil",
	},
	["return"] = {
		description = "Returns occasional results from a function or simply finishes a function.",
		requiredEntries = 0,
		params = {"any"},
		returns = "any",
	},
	["return-if"] = {
		description = "Returns occasional values only if the first value is true from a function or simply finishes a function.",
		requiredEntries = 0,
		params = {"any"},
		returns = "any",
	},
	["lorem"] = {
		description = "Returns a lorem ipsum template.",
		requiredEntries = 0,
		params = {},
		returns = "string",
	},
	["clock"] = {
		description = "Returns the total time cobalt is running. Can be used like the tick from Roblox.",
		requiredEntries = 0,
		params = {},
		returns = "number",
	},
	["date"] = {
		description = "Returns the current OS date as a list.",
		requiredEntries = 0,
		params = {},
		returns = "list",
	},
	["time"] = {
		description = "Returns the current OS time as a list.",
		requiredEntries = 0,
		params = {},
		returns = "list",
	},
	["alphabet"] = {
		description = "Returns a list of the alphabet.",
		requiredEntries = 0,
		params = {"number"},
		returns = "list",
	},

	-- stringing
	["str"] = {
		description = "Returns a single string with by given values.",
		requiredEntries = 1,
		openEntries = true,
		params = {"any"},
		returns = "string",
	},
	["str!"] = {
		description = "Forces a string return by the given values.",
		requiredEntries = 1,
		openEntries = true,
		params = {"any"},
		returns = "string",
	},
	["color"] = {
		description = "Returns a string colorized with the given string and color names. Names: red, green, blue, yellow, purple, orange, cyan, magenta, black, white, gray, pink, brown, lime, navy, blank or you can define your own color as a hex code '#ff00ff'",
		requiredEntries = 2,
		params = {"string", "string"},
		returns = "string",
	},
	["format"] = {
		description = 'Format a string with the >=2 values, i.g: (format "Hello, {1} {2}!" "Ramires" "Oliv")',
		requiredEntries = 2,
		openEntries = true,
		params = {"string", "any"},
		returns = "string",
	},
	["split"] = {
		description = 'Splits a string with by the seconds given value, i.g: (split "a b c" " "): [a,b,c]',
		requiredEntries = 1,
		params = {"string", "string"},
		returns = "list",
	},
	["replace"] = {
		description = 'Replaces a specific character in a string, i.g: (replace "Hello World!" "o" "x"): "Hellx Wxrld!"',
		requiredEntries = 3,
		params = {"string", "string", "string"},
		returns = "string",
	},
	["len"] = {
		description = 'Return the length of a string or a list.',
		requiredEntries = 1,
		params = {"string/list"},
		returns = "number",
	},
	["reverse"] = {
		description = 'Reverses a string or a list.',
		requiredEntries = 1,
		params = {"string/list"},
		returns = "any",
	},
	["upper"] = {
		description = 'UP CASES THE FULL GIVEN STRING.',
		requiredEntries = 1,
		params = {"string"},
		returns = "string",
	},
	["lower"] = {
		description = 'Low cases the full given string.',
		requiredEntries = 1,
		params = {"string"},
		returns = "string",
	},
	["upper?"] = {
		description = 'CHECKS IF IS UP CASES THE FULL GIVEN STRING.',
		requiredEntries = 1,
		params = {"string"},
		returns = "boolean",
	},
	["lower?"] = {
		description = 'checks if is low cases the full given string.',
		requiredEntries = 1,
		params = {"string"},
		returns = "boolean",
	},
	["ord"] = {
		description = 'returns an ASCII code (number) of an string character.',
		requiredEntries = 1,
		params = {"string"},
		returns = "number",
	},
	["chr"] = {
		description = 'returns the character from an ASCII code (number)',
		requiredEntries = 1,
		params = {"number"},
		returns = "string",
	},

	-- listssss
	--[[["append"] = {
		description = "Appends a new value in the given list",
		requiredEntries = 2,
		params = {"list", "any"},
		returns = "list",
	},]]
	["at"] = {
		description = "Gets a value in the given index",
		requiredEntries = 2,
		params = {"list", "number"},
		returns = "any",
	},
	["pop"] = {
		description = "Removes the last value in an list and returns it.",
		requiredEntries = 1,
		params = {"list"},
		returns = "list",
	},
	["push"] = {
		description = "Insert an value into an list.",
		requiredEntries = 2,
		openEntries = true,
		params = {"list", "any"},
		returns = "list",
	},
	["set"] = {
		description = "Edits an value into an list.",
		requiredEntries = 2,
		params = {"list", "number", "any"},
		returns = "list",
	},
	["listrem"] = {
		description = "Removes a value in the given index, then returning the new list.",
		requiredEntries = 2,
		params = {"list", "number"},
		returns = "list",
	},
	["join"] = {
		description = "Joins a given list into a string separeted by the second value. (second value is optional, default is a space)",
		requiredEntries = 1,
		params = {"list", "string"},
		returns = "string",
	},
	["skip"] = {
		description = "Skips an amout of characters of a string.",
		requiredEntries = 2,
		params = {"string", "number"},
		returns = "string",
	},
	["crop"] = {
		description = 'Crops an specific amount of characters in a string or list values. The first value is the start index and the second value is the end index. i.g: (crop "Hello World!" 1 5): "ello"',
		requiredEntries = 2,
		params = {"string/list", "number", "number"},
		returns = "string/list",
	},
	["first"] = {
		description = "Returns a amount of characters in the beginning of an string or list.",
		requiredEntries = 1,
		params = {"string/list", "number"},
		returns = "any",
	},
	["last"] = {
		description = "Returns a amount of characters in the ending of an string or list.",
		requiredEntries = 1,
		params = {"string/list", "number"},
		returns = "any",
	},
	["find"] = {
		description = "Find a value in a list or a string in a string.",
		requiredEntries = 2,
		params = {"list/string", "string/number"},
		returns = "boolean",
	},
	["starts?"] = {
		description = "Checks if a string starts with a specific string and returns a boolean.",
		requiredEntries = 2,
		params = {"string", "string"},
		returns = "boolean",
	},
	["ends?"] = {
		description = "Checks if a string ends with a specific string and returns a boolean.",
		requiredEntries = 2,
		params = {"string", "string"},
		returns = "boolean",
	},
	["empty?"] = {
		description = "Checks if a string or a list is empty and returns a boolean.",
		requiredEntries = 1,
		params = {"list/string"},
		returns = "boolean",
	},
	["range"] = {
		description = "Returns a list from 1 to the maximum number given in the second value.",
		requiredEntries = 1,
		params = {"number"},
		returns = "list",
	},
	["rpick"] = {
		description = "Randomly pick a character or a value in a list.",
		requiredEntries = 1,
		params = {"list/string"},
		returns = "any",
	},
	["list"] = {
		description = "Creates a new list.",
		requiredEntries = 0,
		params = {},
		returns = "list",
	},
	["pairs"] = {
		description = "Iterates over all key-value pairs in a table, regardless of key type or order. It includes both numeric and non-numeric keys.",
		requiredEntries = 1,
		params = {"list"},
		returns = "list",
	},
	["ipairs"] = {
		description = "Iterates over numeric keys in a table sequentially, starting from 1, and stops at the first missing or nil value.",
		requiredEntries = 1,
		params = {"list"},
		returns = "list",
	},
	["listclr"] = {
		description = "Clears a given list, and returns it.",
		requiredEntries = 1,
		params = {"list"},
		returns = "list",
	},

	-- file system
	["fdexists?"] = {
		description = "Checks if a FILE or DIR exists, returning a boolean.",
		requiredEntries = 1,
		params = {"string"},
		returns = "boolean",
	},
	["dir?"] = {
		description = "Checks if a DIR exists, returning a boolean.",
		requiredEntries = 1,
		params = {"string"},
		returns = "boolean",
	},
	["file?"] = {
		description = "Checks if a FILE exists, returning a boolean.",
		requiredEntries = 1,
		params = {"string"},
		returns = "boolean",
	},
	["attr"] = {
		description = "reads an file or dir attributes.",
		requiredEntries = 1,
		params = {"string"},
		returns = "list",
	},
	["rename"] = {
		description = "renames and changes the file directory depending on the second argument.",
		requiredEntries = 2,
		params = {"string", "string"},
		returns = "nil",
	},
	["delete"] = {
		description = "deletes a file or a directory.",
		requiredEntries = 1,
		params = {"string"},
		returns = "nil",
	},
	["read"] = {
		description = "Reads a file.",
		requiredEntries = 1,
		params = {"string"},
		returns = "string",
	},
	["dir"] = {
		description = "Reads a dir and returns a list.",
		requiredEntries = 1,
		params = {"string"},
		returns = "list",
	},
	--[[["getpath"] = {
		description = "Returns a full file/folder path, returns: 'root/folders/path/to/file.txt'",
		requiredEntries = 1,
		params = {"string"},
		returns = "string",
	},]]
	["edit"] = {
		description = "Edits a file.",
		requiredEntries = 2,
		params = {"string", "any"},
		returns = "nil",
	},
	["mkfile"] = {
		description = "Creates a file.",
		requiredEntries = 1,
		params = {"string", "any"},
		returns = "nil",
	},
	["mkdir"] = {
		description = "Creates a dir.",
		requiredEntries = 1,
		params = {"string"},
		returns = "nil",
	},

	-- math, why not.
	["random"] = {
		description = "Generates a random number from the given values.",
		requiredEntries = 2,
		params = {"number", "number"},
		returns = "number",
	},
	["lerp"] = {
		description = "Lerps a min and a max value depending on the alpha value. (0 to 1) i.g: (lerp 0 100 .5): 50",
		requiredEntries = 3,
		params = {"number", "number", "number"},
		returns = "number",
	},
	["round"] = {
		description = "Rounds a given value.",
		requiredEntries = 1,
		params = {"number", "number"},
		returns = "number",
	},
	["floor"] = {
		description = "Removes the decimal part of the number.",
		requiredEntries = 1,
		params = {"number"},
		returns = "number",
	},
	["abs"] = {
		description = "Returns the absolute value of the given value.",
		requiredEntries = 1,
		params = {"number"},
		returns = "number",
	},
	["true"] = {
		description = "Returns truthiness of a value.",
		requiredEntries = 1,
		params = {"any"},
		returns = "boolean",
	},
	["neg"] = {
		description = "Regativates all the given numbers.",
		requiredEntries = 1,
		openEntries = true,
		params = {"number"},
		returns = "list",
	},
	["inv"] = {
		description = "Inverts the given numbers. Negative to positive and positive to negative.",
		requiredEntries = 1,
		openEntries = true,
		params = {"number"},
		returns = "list",
	},
	["cos"] = {
		description = "Returns the cosine of a number, assumed to be in radians.",
		requiredEntries = 1,
		params = {"number"},
		returns = "number",
	},
	["sin"] = {
		description = "Returns the sine of a number, assumed to be in radians.",
		requiredEntries = 1,
		params = {"number"},
		returns = "number",
	},
	["acos"] = {
		description = "Returns the arc cosine of the value.",
		requiredEntries = 1,
		params = {"number"},
		returns = "number",
	},
	["asin"] = {
		description = "Returns the arc sine of the value.",
		requiredEntries = 1,
		params = {"number"},
		returns = "number",
	},
	["tan"] = {
		description = "Returns the tangent of a number, assumed to be in radians.",
		requiredEntries = 1,
		params = {"number"},
		returns = "number",
	},
	["atan"] = {
		description = "Returns the arc tangent of a vallue in radians.",
		requiredEntries = 1,
		params = {"number"},
		returns = "number",
	},
	["atan2"] = {
		description = "Returns the arc tangent of value 1 or value 2 (in radians) while using the signs of both parameters to find the quadrant of the result. It also handles correctly the case of the vallue being zero.",
		requiredEntries = 2,
		params = {"number", "number"},
		returns = "number",
	},
	["rad"] = {
		description = "Returns the given angle in degrees to radians.",
		requiredEntries = 1,
		params = {"number"},
		returns = "number",
	},
	["log"] = {
		description = "Returns the logarithm of the number using a base, or a mathematical constant 'e' if no base is provided.",
		requiredEntries = 1,
		params = {"number", "number"},
		returns = "number",
	},
	["log10"] = {
		description = "Returns the base-10 logarithm of the given value.",
		requiredEntries = 1,
		params = {"number"},
		returns = "number",
	},
	["deg"] = {
		description = "Returns the angle of the value (given in radians) in degrees.",
		requiredEntries = 1,
		params = {"number"},
		returns = "number",
	},
	["noise"] = {
		description = "Returns a Perlin noise value.",
		requiredEntries = 1,
		params = {"number", "number", "number"},
		returns = "number",
	},
	["sqrt"] = {
		description = "Returns the square root of the given value.",
		requiredEntries = 1,
		params = {"number"},
		returns = "number",
	},
	["sign"] = {
		description = "Returns -1 if the given number is less than 0, 0 if the number is equal as 0, 1 if the number is greater than 0.",
		requiredEntries = 1,
		params = {"number"},
		returns = "number",
	},
	["ceil"] = {
		description = "Returns the smallest integer larger than or equal to the value.",
		requiredEntries = 1,
		params = {"number"},
		returns = "number",
	},
	["randomseed"] = {
		description = "Creates a seed by pseudo-random generation.",
		requiredEntries = 1,
		params = {"number"},
		returns = "number",
	},
	["e"] = {
		description = "Returns the Euler number. an irrational mathematical constant approximately equal to 2.71828 is the base of the natural logarithm.",
		requiredEntries = 0,
		params = {},
		returns = "number",
	},

	-- json/http handling
	["json-encode"] = {
		description = "Returns a JSON string native translated by the given value.",
		requiredEntries = 1,
		params = {"any"},
		returns = "string",
	},
	["json-decode"] = {
		description = "Returns a value by the JSON string given.",
		requiredEntries = 1,
		params = {"string"},
		returns = "any",
	},
	["http-get"] = {
		description = "HTTP only get request",
		requiredEntries = 1,
		params = {"string"},
		returns = "any",
	},
	["http-post"] = {
		description = "HTTP only post request, the post body can be any value but, if a JSON object is required, use (object index value) as body or make your own JSON string.",
		requiredEntries = 1,
		params = {"string", "any", "string"},
		returns = "any",
	},
	["object"] = {
		description = 'Create a json object, by each of the given pairs of arguments, i.g: (object index value): {index: "value"}. Very USEFUL for http post requests!',
		requiredEntries = 2,
		openEntries = true,
		params = {"any"},
		returns = "string",
	},

	-- checkers/utils
	["odd?"] = {
		description = "Returns a boolean if number is odd or not.",
		requiredEntries = 1,
		params = {"number"},
		returns = "boolean",
	},
	["even?"] = {
		description = "Returns a boolean if number is even or not.",
		requiredEntries = 1,
		params = {"number"},
		returns = "boolean",
	},
	["bool?"] = {
		description = "Returns a boolean if value is a boolean.",
		requiredEntries = 1,
		params = {"any"},
		returns = "boolean",
	},
	["str?"] = {
		description = "Returns a boolean if value is a string.",
		requiredEntries = 1,
		params = {"any"},
		returns = "boolean",
	},
	["num?"] = {
		description = "Returns a boolean if value is a number.",
		requiredEntries = 1,
		params = {"any"},
		returns = "boolean",
	},
	["list?"] = {
		description = "Returns a boolean if value is a list.",
		requiredEntries = 1,
		params = {"any"},
		returns = "boolean",
	},
	["filter"] = {
		description = "Filters a list based in the function result i.g: (filter [1,2,3,4] odd?): [2,4]",
		requiredEntries = 2,
		params = {"list", "string"},
		returns = "list",
	},
	["sort"] = {
		description = "Sorts a list i.g: (test a b (return (< {a} {b}))) (sort [1,4,3,2] test): [1,2,3,4]",
		requiredEntries = 2,
		params = {"list", "string"},
		returns = "list",
	},

	-- cobalt debug things
	["cobalt_temp_size"] = {
		description = "returns a table with amount of data in each temporary sectors of cobalt, {funcs, client, vars}",
		requiredEntries = 0,
		params = {},
		returns = "list",
	}
}

exports.paramsNames = {
	["nil"] = "nil",
	str = "string",
	num = "number",
	bool = "boolean",
	func = "function",
	dict = "table_index",
	list = "table",
};

exports.natives = {  -- callers, like {E} <- by default writes "2.71828" or {username} writes "test_user"
	E = 2.71828,
	PI = math.pi,
	ZERO = 0,
	HUGE = math.huge,
	desktopname = "test_pc", -- useless
	username = "test_user", -- useless
	cd = "test" -- useless
}

exports.ilegalChars = { -- no need changes. But well. Go ahead.
	"","\\","/",
	"?","!","¡",
	"¿","<",">",
	"'",'"',":",
	";",",","&",
	"%%",'%(','%)',
	'%[','%]','%{',
	'%}',"<",">",
	"`","%^","¨",
	"¡","¿", "#"
}

return exports or not "not right or really not right, how this is being returned, idk."
